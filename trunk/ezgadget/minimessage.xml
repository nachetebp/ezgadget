<?xml version="1.0" encoding="UTF-8" ?>
<Module>
<ModulePrefs title="Message Mania">
<Require feature="minimessage" />
</ModulePrefs>
<Content type="html">
<![CDATA[
<div>
This is some gadget content here
</div>

<!-- Create message within the DOM in order to position dismissible messages -->
<div id="message">Click on the X to hide</div>

<div>
Some more gadget content here
</div>

<script>
var msg = new _IG_MiniMessage(__MODULE_ID__);

// Case 1: Create dismissible message with an HTML string.
// Create a quick dismissible message by passing in an HTML string as the first parameter.
// By default, this message will be inserted at the very top.
var one = msg.createDismissibleMessage("New message using HTML string");

// Case 2: Create dismissible message with an existing HTML element
// Create a dismissible message referencing an HTML element already existing within
// the DOM. This will preserve the location of the message allowing the user
// to position where the message will show.
msg.createDismissibleMessage(_gel("message"));

// Case 3: Create dismissible message with an HTML element not yet within the DOM.
// Some users want/need to generate HTML using W3C DOM methods for various reasons.
// By default, the message is inserted at the very top.
var div = document.createElement("div");
div.innerHTML = "New message created by W3C DOM methods.";
div.onmouseover = function() {
div.style.backgroundColor = "green";
};
div.onmouseout = function() {
div.style.backgroundColor = "";
};
msg.createDismissibleMessage(div);

// Case 4: Create a dismissible message with different background color and forecolor
var colorMsg = msg.createDismissibleMessage("I am unique.");
colorMsg.style.backgroundColor = "red";
colorMsg.style.color = "white";

// Case 5: Create dismissible message with a callback function.
// Many times, the gadget needs to be notified when a message has been dismissed.
// If a callback function is defined, it is called when this message has been dismissed.
// The dismiss can be cancelled if the callback returns false.
msg.createDismissibleMessage("Execute callback when dismissed.", dismissed);

// Case 6: Create timer message which dismisses after X seconds.
// Sometimes, it burdens users to have to click [x] to close a message.
// With a timed message, you can remove this burden by showing it for a few seconds.
// When the timer expires, the callback is called if it exists.
msg.createTimerMessage("<div style='text-align:center;'>Timer message shows for X seconds</div>", 2);

// Case 7: Create static message which can only be dismissed programmatically by ID.
// Good for loading messages, where another event will manually dismiss the message.
var staticMsg = msg.createStaticMessage("Static message. Manually dismiss by clicking.");
staticMsg.style.cursor = "pointer";
staticMsg.onclick = function() {
msg.dismissMessage(staticMsg);
};

// Used as callback function when message is dismissed.
// If callback returns false, then cancel the dismissal.
function dismissed() {
return confirm("Dismiss message?");
}
</script>


]]>
</Content>
</Module>